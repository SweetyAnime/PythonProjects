from collections import deque

class Solution:
    def solve(self, board):
        start, goal = tuple(sum(board, [])), (1, 2, 3, 4, 5, 6, 7, 8, 0)
        if start == goal: return 0

        moves = {0: [1, 3], 1: [0, 2, 4], 2: [1, 5], 3: [0, 4, 6], 4: [1, 3, 5, 7], 
                 5: [2, 4, 8], 6: [3, 7], 7: [4, 6, 8], 8: [5, 7]}
        queue, visited = deque([(start, 0)]), {start}

        while queue:
            state, count = queue.popleft()
            for move in moves[state.index(0)]:
                new_state = list(state)
                new_state[state.index(0)], new_state[move] = new_state[move], new_state[state.index(0)]
                new_state = tuple(new_state)
                if new_state == goal: return count + 1
                if new_state not in visited: visited.add(new_state); queue.append((new_state, count + 1))

        return -1

# Test the solution
matrix = [[3, 1, 2], [4, 7, 5], [6, 8, 0]]
print("NO OF MOVES =", Solution().solve(matrix))
